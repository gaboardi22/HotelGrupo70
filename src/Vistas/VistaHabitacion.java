
package Vistas;

import AccesoDatos.HabitacionData;
import AccesoDatos.TipoHabitacionData;
import Entidades.Habitacion;
import Entidades.TipoHabitacion;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class VistaHabitacion extends javax.swing.JInternalFrame {

       private DefaultTableModel modelo = new DefaultTableModel(){
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };
    public VistaHabitacion() {
        initComponents();
        armarCabecera();
        cargarHabitacion();
        cargarComboBoxTipoHabitacion();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jBAgregar = new javax.swing.JButton();
        jBModificar = new javax.swing.JButton();
        jBSalir = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableHabitaciones = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jTNumeroHabitacion = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTPiso = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jCTipoHabitacion = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jTEstado = new javax.swing.JTextField();

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("HABITACIONES");

        jBAgregar.setText("AGREGAR");
        jBAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAgregarActionPerformed(evt);
            }
        });

        jBModificar.setText("MODIFICAR");
        jBModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBModificarActionPerformed(evt);
            }
        });

        jBSalir.setText("SALIR");
        jBSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSalirActionPerformed(evt);
            }
        });

        jTableHabitaciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableHabitaciones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableHabitacionesMouseClicked(evt);
            }
        });
        jTableHabitaciones.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableHabitacionesKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTableHabitaciones);

        jLabel2.setText("NUMERO HABITACION");

        jLabel3.setText("PISO");

        jLabel4.setText("TIPO HABITACION");

        jLabel5.setText("ESTADO");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(328, 328, 328)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(67, 67, 67)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jCTipoHabitacion, 0, 358, Short.MAX_VALUE)
                            .addComponent(jTPiso, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTNumeroHabitacion, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTEstado))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBAgregar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 273, Short.MAX_VALUE)
                        .addComponent(jBModificar)
                        .addGap(233, 233, 233)
                        .addComponent(jBSalir)
                        .addGap(25, 25, 25))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTNumeroHabitacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTPiso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jCTipoHabitacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jBAgregar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBSalir)
                    .addComponent(jBModificar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_jBSalirActionPerformed

    private void jBAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAgregarActionPerformed
       
        Habitacion habitacion = new Habitacion();
        TipoHabitacion tipoHabitacion = new TipoHabitacion();
        TipoHabitacionData tipoHabitacionD = new TipoHabitacionData();
       // List<String> listaAtributos = new ArrayList<>();
       
        String [] listaAtributos   = jCTipoHabitacion.getSelectedItem().toString().trim().split(",");
        
        int id = Integer.parseInt(listaAtributos[0]);
        tipoHabitacion = tipoHabitacionD.buscarTipoHabitacionPorId(id);
        HabitacionData habitacionD = new HabitacionData();
        habitacion.setPiso(Integer.parseInt(jTPiso.getText()));
        habitacion.setNumeroHabitacion(Integer.parseInt(jTNumeroHabitacion.getText()));
        habitacion.setTipoHabitacion(tipoHabitacion);
        habitacion.setEstado(true);
        habitacionD.crearHabitacion(habitacion);
        cargarHabitacion();
        
    }//GEN-LAST:event_jBAgregarActionPerformed

    private void jBModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBModificarActionPerformed
       if (jTableHabitaciones.getSelectedRow()!= -1){
           Habitacion habitacion = new Habitacion();
           HabitacionData habitacionD = new HabitacionData();
           habitacion.setPiso(Integer.parseInt(jTPiso.getText()));
           habitacion.setEstado((Boolean.parseBoolean(jTEstado.getText())));
           habitacion.setNumeroHabitacion((Integer.parseInt(jTNumeroHabitacion.getText())));
           
         TipoHabitacion tipoHabitacion = new TipoHabitacion();
        TipoHabitacionData tipoHabitacionD = new TipoHabitacionData();
        String [] listaAtributos   = jCTipoHabitacion.getSelectedItem().toString().trim().split(",");
        int id = Integer.parseInt(listaAtributos[0]);
        tipoHabitacion = tipoHabitacionD.buscarTipoHabitacionPorId(id);
        habitacion.setTipoHabitacion(tipoHabitacion);
        habitacionD.actualizarHabitacion(habitacion);
        cargarHabitacion();
       }
    }//GEN-LAST:event_jBModificarActionPerformed

    private void jTableHabitacionesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableHabitacionesMouseClicked
        cargarFormulario();
    }//GEN-LAST:event_jTableHabitacionesMouseClicked

    private void jTableHabitacionesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableHabitacionesKeyReleased
        cargarFormulario();
    }//GEN-LAST:event_jTableHabitacionesKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAgregar;
    private javax.swing.JButton jBModificar;
    private javax.swing.JButton jBSalir;
    private javax.swing.JComboBox<String> jCTipoHabitacion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTEstado;
    private javax.swing.JTextField jTNumeroHabitacion;
    private javax.swing.JTextField jTPiso;
    private javax.swing.JTable jTableHabitaciones;
    // End of variables declaration//GEN-END:variables

    private void armarCabecera() {
        modelo.addColumn("NUMERO");
        modelo.addColumn("PISO");
        modelo.addColumn("TIPO HABITACION");
        modelo.addColumn("ESTADO");
        jTableHabitaciones.setModel(modelo);
    }

    private void eliminarFilas() {
        int f = jTableHabitaciones.getRowCount() - 1;
        for (; f >= 0; f--) {
            modelo.removeRow(f);
        }
    }

    private void cargarHabitacion() {
        List<Habitacion> habitaciones = new ArrayList<>();
        HabitacionData consultaHabitaciones = new HabitacionData();
        habitaciones = consultaHabitaciones.listarHabitacion();
        eliminarFilas();
        for (Habitacion habitacion : habitaciones) {
            modelo.addRow(new Object[]{
                habitacion.getNumeroHabitacion(),
                habitacion.getPiso(),
                habitacion.getTipoHabitacion().getTipoCamas(),
                habitacion.isEstado()
            });
        }
    }
    
      private void cargarComboBoxTipoHabitacion() {
        List<TipoHabitacion>listaTipoHabitacion = new ArrayList<>();
        TipoHabitacionData tipoHabitacionD = new TipoHabitacionData();
        listaTipoHabitacion = tipoHabitacionD.consultaTipoHabitacion();
        List<String> listaTipoHabitacionString = new ArrayList<>();
        for(TipoHabitacion tipohabitacion:listaTipoHabitacion){
            listaTipoHabitacionString.add(tipohabitacion.toString());
        }
        for(String tipoHabitacionString:listaTipoHabitacionString){
            jCTipoHabitacion.addItem(tipoHabitacionString);
        }
    }
public void cargarFormulario(){
    Habitacion habitacion = new Habitacion();
    HabitacionData habitacionD = new HabitacionData();
    habitacion = habitacionD.recuperarHabtacionPorNumero((int) modelo.getValueAt(jTableHabitaciones.getSelectedRow(), 0));
            //jTNumeroHabitacion.setText((habitacion.getNumeroHabitacion()));
            jTNumeroHabitacion.setText(("" + habitacion.getNumeroHabitacion()));
            jTPiso.setText("" + habitacion.getPiso());
            int indice = 0;
            for(int i = 0; i < jCTipoHabitacion.getItemCount(); i ++ ){
                if(habitacion.getTipoHabitacion().toString().equals(jCTipoHabitacion.getItemAt(i).toString())){
                    indice = i ;
                   break;                
                }  
            }
            //jTPiso.set((habitacion.getPiso());
           jCTipoHabitacion.setSelectedIndex(indice);
           jTEstado.setText(""+habitacion.isEstado());
        
}
}
